// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using NextDoorBackend.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NextDoorBackend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240906092415_v.1.0.3")]
    partial class v103
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BusinessCategoriesEntityBusinessProfilesEntity", b =>
                {
                    b.Property<Guid>("BusinessProfilesEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoriesId")
                        .HasColumnType("uuid");

                    b.HasKey("BusinessProfilesEntityId", "CategoriesId");

                    b.HasIndex("CategoriesId");

                    b.ToTable("BusinessCategoriesEntityBusinessProfilesEntity");
                });

            modelBuilder.Entity("NextDoorBackend.SDK.Entities.AccountsEntity", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("NextDoorBackend.SDK.Entities.BusinessCategoriesEntity", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CategoryDescription")
                        .HasColumnType("text");

                    b.Property<string>("CategoryName")
                        .HasColumnType("text");

                    b.Property<int?>("CategorySubType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("BusinessCategories");
                });

            modelBuilder.Entity("NextDoorBackend.SDK.Entities.BusinessProfilesEntity", b =>
                {
                    b.Property<Guid?>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("About")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("BusinessHours")
                        .HasColumnType("text");

                    b.Property<string>("BusinessName")
                        .HasColumnType("text");

                    b.Property<string>("BusinessStatus")
                        .HasColumnType("text");

                    b.Property<Guid[]>("CategoryId")
                        .HasColumnType("uuid[]");

                    b.Property<string>("CoverPhoto")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("LogoPhoto")
                        .HasColumnType("text");

                    b.Property<int?>("NeighborhoodId")
                        .HasColumnType("integer");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("Website")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NeighborhoodId");

                    b.ToTable("BusinessProfiles");
                });

            modelBuilder.Entity("NextDoorBackend.SDK.Entities.EmployeeEntity", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("NextDoorBackend.SDK.Entities.GendersEntity", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("GenderName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("NextDoorBackend.SDK.Entities.IndividualProfilesEntity", b =>
                {
                    b.Property<Guid?>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<string>("CoverPhoto")
                        .HasColumnType("text");

                    b.Property<Guid?>("GenderId")
                        .HasColumnType("uuid");

                    b.Property<int?>("NeighborhoodId")
                        .HasColumnType("integer");

                    b.Property<string>("ProfilePhoto")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.HasIndex("NeighborhoodId");

                    b.ToTable("IndividualProfiles");
                });

            modelBuilder.Entity("NextDoorBackend.SDK.Entities.NeighborhoodEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Polygon>("Bbox")
                        .IsRequired()
                        .HasColumnType("geometry");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Polygon>("Geometry")
                        .IsRequired()
                        .HasColumnType("geometry");

                    b.Property<float>("Importance")
                        .HasColumnType("real");

                    b.Property<long>("OSMId")
                        .HasColumnType("bigint");

                    b.Property<string>("OSMType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("PlaceId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Neighborhoods");
                });

            modelBuilder.Entity("NextDoorBackend.SDK.Entities.ProfilesEntity", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<string>("ProfileName")
                        .HasColumnType("text");

                    b.Property<string>("ProfileType")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("BusinessCategoriesEntityBusinessProfilesEntity", b =>
                {
                    b.HasOne("NextDoorBackend.SDK.Entities.BusinessProfilesEntity", null)
                        .WithMany()
                        .HasForeignKey("BusinessProfilesEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NextDoorBackend.SDK.Entities.BusinessCategoriesEntity", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NextDoorBackend.SDK.Entities.BusinessProfilesEntity", b =>
                {
                    b.HasOne("NextDoorBackend.SDK.Entities.ProfilesEntity", "Profile")
                        .WithOne("BusinessProfile")
                        .HasForeignKey("NextDoorBackend.SDK.Entities.BusinessProfilesEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NextDoorBackend.SDK.Entities.NeighborhoodEntity", "Neighborhood")
                        .WithMany()
                        .HasForeignKey("NeighborhoodId");

                    b.Navigation("Neighborhood");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("NextDoorBackend.SDK.Entities.IndividualProfilesEntity", b =>
                {
                    b.HasOne("NextDoorBackend.SDK.Entities.GendersEntity", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId");

                    b.HasOne("NextDoorBackend.SDK.Entities.ProfilesEntity", "Profile")
                        .WithOne("IndividualProfile")
                        .HasForeignKey("NextDoorBackend.SDK.Entities.IndividualProfilesEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NextDoorBackend.SDK.Entities.NeighborhoodEntity", "Neighborhood")
                        .WithMany()
                        .HasForeignKey("NeighborhoodId");

                    b.Navigation("Gender");

                    b.Navigation("Neighborhood");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("NextDoorBackend.SDK.Entities.ProfilesEntity", b =>
                {
                    b.HasOne("NextDoorBackend.SDK.Entities.AccountsEntity", "Account")
                        .WithMany("Profiles")
                        .HasForeignKey("AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("NextDoorBackend.SDK.Entities.AccountsEntity", b =>
                {
                    b.Navigation("Profiles");
                });

            modelBuilder.Entity("NextDoorBackend.SDK.Entities.ProfilesEntity", b =>
                {
                    b.Navigation("BusinessProfile")
                        .IsRequired();

                    b.Navigation("IndividualProfile")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
